

from flask import Flask

app = Flask(__name__)

/*
to stop having to restart the server each time there a change is made either:
app.debug = True

or do

app.run(debug = true)
*/

@app.route('/')
def index():
    return 'INDEX'//render a string

if __name__ == '__main__':
    app.run(debug = true)




{% used for logics%} and {{ used to display variables }} (jinja template engine)

Install a package in python3
$ pip3 install package_name

To update your version of Python 3, you can first update Homebrew and then update Python:

$ brew update
$ brew upgrade python3

Step 5 — Creating a Virtual Environment
Now that we have Xcode, Homebrew, and Python installed, we can go on to create our programming environment.

Virtual environments enable you to have an isolated space on your computer for Python projects, ensuring that each of your projects can have its own set of dependencies that won’t disrupt any of your other projects.

Setting up a programming environment provides us with greater control over our Python projects and over how different versions of packages are handled. This is especially important when working with third-party packages.

You can set up as many Python programming environments as you would like. Each environment is basically a directory or folder in your computer that has a few scripts in it to make it act as an environment.

Choose which directory you would like to put your Python programming environments in, or create a new
directory with mkdir, as in:

mkdir Environments
cd Environments

https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-macos
